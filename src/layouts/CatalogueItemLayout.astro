---
import BaseLayout from "$layouts/BaseLayout.astro"
import { CatalogueType, CatalogueItem } from "$data/catalogue"
import { readableDate } from "$utils"
export interface Props {
  catalogueItem: CatalogueItem
}

function unescapeHtml(unsafe) {
  return unsafe.replace(/&lt;/g, "<").replace(/&gt;/g, ">")
}

const { catalogueItem } = Astro.props as Props

let metaInfo = []
switch (catalogueItem.type) {
  case CatalogueType.BOOK:
    metaInfo = [
      {
        Author: catalogueItem.author,
        Genre: catalogueItem.genre,
      },
      {
        "Started on": readableDate(catalogueItem.started_on),
        "Ended on": readableDate(catalogueItem.ended_on),
      },
    ]

    // Books have two types, you can either have a collection of books (often used for mangas) or a single book in a single entry
    // They both share most attributes, except that for collections, we'll prefer to have the amount of chapters and volumes
    // and we don't care much about the format (which can vary by volume anyway) and for single books, we want the number of pages
    switch (catalogueItem.formatType) {
      case "multiple":
        metaInfo[0].Chapters = catalogueItem.chapters
        metaInfo[1].Volumes = catalogueItem.volumes
        break
      case "single":
        metaInfo[0].Format = catalogueItem.format
        metaInfo[1].Pages = catalogueItem.pages
        break
    }
    break

  case CatalogueType.GAME:
    metaInfo = [
      {
        Developer: catalogueItem.developer,
        Genre: catalogueItem.genre,
        Platform: catalogueItem.platform,
      },
      {
        "Started on": readableDate(catalogueItem.started_on),
        "Ended on": readableDate(catalogueItem.ended_on),
        Playtime: catalogueItem.playtime,
      },
    ]
    break

  case CatalogueType.SHOW:
    metaInfo = [
      {
        Producer: catalogueItem.producer,
        Platform: catalogueItem.platform,
        Seasons: catalogueItem.seasons,
      },
      {
        "Started on": readableDate(catalogueItem.started_on),
        "Ended on": readableDate(catalogueItem.ended_on),
        Episodes: catalogueItem.episodes,
      },
    ]
    break
}
---

<BaseLayout>
  <article class="w-index mx-auto mt-6">
    <a href="/catalogue/">Back to Catalogue</a>
    <header class="flex justify-between gap-4 px-4 my-4">
      <Fragment
        set:html={// We remove the background we add for small elements manually on this page
        unescapeHtml(catalogueItem.cover).replace("bg-fin-lanka bg-opacity-50", "")}
      />
      <div class="flex items-center bottom-2 catalogue--item-meta flex-1 justify-center relative">
        <div>
          <h2 class="mt-0 text-center">{catalogueItem.title}</h2>

          <section class="flex justify-center gap-14">
            {metaInfo.map((meta) => <dl>
                {Object.entries(meta).map((info) => (
                    <dt>{info[0]}</dt>
                    <dd>{info[1]}</dd>
                ))}
              </dl>)}
          </section>
        </div>
      </div>
    </header>
    <h2 class="mb-3 mt-0">Quick thoughts</h2>
    <section class="px-2">
      <!-- prettier-ignore -->
      <catalogueItem.Content></catalogueItem.Content>
    </section>
  </article>
</BaseLayout>
